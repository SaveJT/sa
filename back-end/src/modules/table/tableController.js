import { Router } from 'express';
import { getData,insertData,updateData,deleteData} from './tableSevice.js';


export const router = Router();

router.get('/', (req, res) => {
  res.send('Server is running...');
});

// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BMI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞ identity
router.get('/bmi', async (req, res) => {
  try {
    const identity = req.query.identity || null;
    const data = await getData(identity);

    if (!data || data.length === 0) {
      return res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
    }

    res.json(data);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BMI
router.post('/bmi', async (req, res) => {
  try {
    const { identity, name, weight, hight } = req.body;
    
    if (!identity || !name || !weight || !hight) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô identity, name, weight, ‡πÅ‡∏•‡∏∞ hight" });
    }

    const heightInMeters = hight / 100;
    const bmi = weight / (heightInMeters * heightInMeters);

    let category = '';
    if (bmi < 18.5) category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô';
    else if (bmi < 24.9) category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥';
    else if (bmi < 29.9) category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô';
    else category = '‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô';

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await insertData(identity, name, weight, hight, bmi);

    res.json({
      message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BMI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      bmi: bmi.toFixed(2),
      category
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BMI ‡∏ï‡∏≤‡∏° identity
router.put('/bmi/:identity', async (req, res) => {
  try {
    const identity = req.params.identity;
    const { name, weight, hight } = req.body;

    if (!name || !weight || !hight) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô name, weight, ‡πÅ‡∏•‡∏∞ height" });
    }

    const heightInMeters = hight / 100;
    const bmi = weight / (heightInMeters * heightInMeters);

    let category = '';
    if (bmi < 18.5) category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô';
    else if (bmi < 24.9) category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥';
    else if (bmi < 29.9) category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô';
    else category = '‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ)';

    const result = await updateData(identity, name, weight, hight, bmi.toFixed(2), category);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// üìå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BMI ‡∏ï‡∏≤‡∏° identity
router.delete('/bmi/:identity', async (req, res) => {
  try {
    const identity = req.params.identity;
    const result = await deleteData(identity);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});